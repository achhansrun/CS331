// CS F331 Programming Languages Midterm Study Materials
// All information from slides for previous classes.
// Each labeled section corresponds to a single day's lecture slides.

// Intro
What is a PL specification? !! A precise description of a PL with enough information to write a compiler for it.
What makes something dynamic? !! If it happens at run time.
What makes something static? !! If it happens before run time.
What is a PL's syntax? !! The correct structure of the PL's code (maybe a + b is ok, but a b + isn't, for example)
What is a PL's semantics? !! The meaning of the PL's code (a + b: function op+ is called with a and b as args. Ret val is val of expression).
What is parsing? !! Determining whether code is syntactically correct, and if so, determining its structure.
What is a string? !! A finite sequence of zero or more characters.
What is a formal language (or just language)? !! A set of strings.
What is an alphabet? !! The characters that can make up strings in a language.
How do we relate alphabets and languages? !! A language is *over* an alphabet.
What is a generator? !! Something that can produce all of the strings in a language, and nothing else.
What is a recognizer? !! A way of determining if a given string lies in the language (given a valid string, says yes; if not, no).
What is a phase-structure grammar (or just grammar)? !! A kind of language generator. A list of one or more productions.
What is a production? !! A rule for altering strings by substituting one substring for another (made of terminals/non-terminals).
What are the parts of a grammar? !! Terminal, non-terminal, and start symbols. 
What is a terminal VS non-terminal symbol? !! Terminal symbols are the alphabet. Non-terminals eventually turn into something else.
What is a derivation? !! A string resulting from a grammar.

// The Chomsky Hierarchy
What are the four categories of languages in the Chomsky Hierarchy? !! Regular, context-free, context-sensitive, and computably enumerable.
What types of grammars generate what types of languages? !! Regular grammar -> Regular language, etc.
What is a regular language? !! One that can be generated by a grammar where each production has one of the following forms:\n* a -> Ɛ\n* A -> b\n* a -> bC
What is a regular language recognized by? !! A deterministic finite automaton.
What is lexical analysis? What does it require? !! Breaking a program into lexemes. Requires at least a regular language.
How are the four categories of languages connected? !! Regular Ɛ Context-Free Ɛ Context-Sensitive Ɛ Computably Enumerable
What is a context-free language? !! One that can be generated by a grammar in which the left-hand of each production consists of a SINGLE non-terminal (i.e., A -> [anything]).
What is a context-free language recognized by? !! A non-deterministic push-down automaton.
What is a context-sensitive language? !! We don't care; this category is a mistake. Only historically interesting.
What is a computably enumerable language? !! One that can be described by an unrestricted grammar.
What is a computably enumerable language recognized by? !! A Turing machine. 
What is another name for a computably enumerable language? !! A recursively enumerable language.
What is a deterministic finite automaton (DFA)? !! A recognizer for regular languages. Consists of a finite collection of states (start, accepting, intermediate) and transitions between those states.
Can you draw a DFA diagram? !! I hope so!
True or false: The languages recognized by DFAs are precisely the regular languages. !! True!
Is a DFA a state machine? !! Yes.

// Regular Languages Cont'd
What is an arithmetic expression? !! An expression involving numbers, identifiers, and arithmetic operators (e.g., 34*(3-n)+(5.6/g+3).
What is left-associative? Right-associative? !! Left is that 1-2-3 == (1-2)-3, and right is that 1-2-3 == 1-(2-3)
What are regular expressions (AKA regexes)? !! A single character, the empty string. If some A and B are regexes, so are:\n* A* (any # of A)\n* AB (some A and B together)\n* A|B (A or B)\nThe above list goes from high to low precedence, and are all left-associative.
What does a regular expression do? !! It "matches" certain strings (the language it generates is the strings it will match).
What is A* in a regex? !! A* matches the concatenation of zero or more strings A.
What is AB in a regex? !! AB matches the concatenation of any strings A and B.
What is A|B in a regex? !! A|B matches all strings matched by A and also all matched by B.
What is the asterisk called in a regex? !! A "Kleene Star" after Stephen Kleene (pronounced KLAY-nee).
What does a . in a regex mean? !! Matches any single character.
What do brackets mean in a regex? !! Match any one of the characters in the brackets.
What does a - mean in a regex? !! a-z means abcdefghijklmnopqrstuvwxyz
What are /'s for in a regex? !! They can act as a delimeter for regex's (i.e., /a* (b|c)/)
What does a + mean in a regex? !! "One or more." The same as * means zero or more. So, /(abc)+/ is the same as /(abc)(abc)*
What does a ? mean in a regex? !! "Zero or one." So, /x(abc)?/ is the same as /x|xabc/
What does a \ mean in a regex? !! Escape character. So, since . matches any character, \. matches "."

// Context Free Languages
// CFL defined earlier
What is a context-free grammar (CFG)? !! A grammar, each of whose productions has a left-hand side consisting of a single non-terminal.
What is a parse tree? !! A visual way to represent the result of parsing a program's structure. It is a tree rooted on the start symbol with one symbol in each node, based on a derivation.
When is a CFG ambiguous? !! When any derivation has more than one parse tree.
When is a CFL inherently ambiguous? !! Languages only generated by ambiguous CFG's.
What is the difference between ambiguity and inherent ambiguity? !! Ambiguity is a property of GRAMMARS, whereas inherent ambiguity is a property of languages.
What is a left/rightmost derivation? !! The left/rightmost non-terminal is expanded at each step.
What is a parser doing when it expands a derivation? !! It goes through the derivation in forward order (turning non-terminals into substrings).
What is a parser doing when it contracts a derivation? !! It goes through the derivation in reverse order (contracting substrings into non-terminals).
What is the difference between a parse tree and a derivation? !! A parse tree is a ROOTED TREE. A derivation is a list of strings.
Does every parse tree have a corresponding left- and right-most derivation? !! Yes! Sometimes they're the same. 
What is ambiguity about? !! Multiple PARSE TREES. NOT multiple derivations. A single parse tree can be the result of different derivations of the same string.

// PL Syntax Specification
What is Backus-Naur Form (BNF)? !! A notation for writing CFG's.
What is Extended Backus-Naur Form (EBNF)? How is it different from BNF? !! EBNF is another notation for writing CFG's. It has notation that allows for repeatable or optional repeatable sections, unlike BNF.
What is the lexical structure of a PL? !! How a program is broken into lexemes. Often specified differently from overall syntax.
What is the "dangling else" problem? !! Some languages are ambiguous in that the else following two nested if statements could apply to either of the if's.
What is a complete notation that specifies computations? !! A program!
What do we call an arbitrary thing in a program? !! An entity.
What is an expression? !! An entity that has a value.
What do we substitute instead of using the word type? !! Kind or category.
What happens when a program is executed? !! The computations it specifies occur.
In what time is a program executed? !! Runtime.
What is a runtime system? !! Part of a PL implementation. Code that assists in, or sometimes performs, execution of a program (low-level I/O, memory management, etc).
What is a compiler? !! A program that takes code in one PL (source language) and transforms it into another (target language).
What does a compiler target? !! The programming language into which it transforms programs of some initial language.
What do compilers often target? !! Native or byte code. Some target JavaScript, though (they can target any PL).
What is an intermediate representation in a compiler? !! The something else a PL is turned into before going to the target language.
What is an interpreter? !! A program that takes code in some PL and executes it.
What is JIT compilation? !! Just-In-Time. Code is compiled at runtime.

// Dynamic PL's
What is a batch file? !! A file containing a batch (i.e., a list) of commands.
What is a script? !! A program written in the PL resulting from the syntax introduced to batch files.
What is a shell? A shell script? !! A shell is a program that handles interactive command entry. A shell script is a program interpreted by the shell.
What is a scripting language? !! The PL in which a script is written.
What is AWK? !! The first small, high-level PL.
What is Perl? !! Based on AWK, a PL that is full-featured (has data structures, access to OS services).
What are dynamic PL's? !! Languages that follow from the style of script-based early PL's. 
What are the important features of a dynamic PL? !! \n* Dynamic typing (types determined/checked at runtime)\n* Code is basically imperative (we tell the code what to do) and block-structured, supporting OOP.\n* Many other, less important things.
What makes a program "lightweight?" !! If its source tree (the dir structure holding the source code for the components of the PL) is unusually small.
What makes a PL imperative? !! If we write statements that tell the PL what to do.
What is a foreign function interface? !! A way for a PL to interact with other PL's.
What is dynamic typing? !! Types are determined and checked at runtime.
What is implicit typing? !! When types do not need to be explicitly stated.
What is duck typing? !! If an argument has the operations to work in a function, then it must work!
How many types does Lua have? Can you name them? !! 8 types: number, string, bool, table, function, nil, userdata, and thread.
What makes a type (like a function) first-class? !! If its values can be created, stored, operated on, passed, and returned with the ease and facility that you would expect of a C++ int.
What is eager evaluation? !! An expression is evaluated when it is first encountered during execution.
What is lazy evaluation? !! An expression is only evaluated when it is needed.
What is an interactive environment? !! An environment that allows for statements to be typed in for immediate execution.
What is a sheband line, and what is its purpose? !! A shebang is "#!", followed by the path of the interpreter for a PL, entered as the first line of a program.

// Lua Fundamentals
What is a reserved word? !! A word that has the general form of an identifier but is not allowed as an identifier in a PL.
What is a keyword? !! A word with some special meaning.
Are keywords also reserved words? !! Yes! This is common but not universal.
What is a literal? !! A representation of a fixed value in source code.
What is multiple assignment? !! a, b, c = 1, 2, 3 assigns a = 1, b = 2, c = 3
What is a lambda function? !! A function that omits the name, creating an unnamed function.
What does it mean for something to be falsy or truthy? !! When an if statement evaluates it as true, it is truthy, and same for falsy.
What is a module? !! An importable library that is encapsulated (that is, handled as a single entity by a PL).

// Lua Objects
What is an object? !! Data encapsulated with associated functions into one entity.
What is a metatable in Lua? !! A table associated with a given table, used to implement various special operations involving the original table.
In Lua, what is the colon ":" operator short for? !! Calling a metatable operation on a table. table.function(table, params) becomes table:function(params)
What is syntactic sugar? !! Syntax that adds nothing to a PL other than convenience.
What is overloading? !! Using the same identifier for multiple things in the same namespace. Operator overloading applies overloading to operators.
What is a closure? !! A function that carries with it a reference to or copy of the environment in which it was created (applies to first-class functions).
In what case is a closure possibly wanted? !! If an object exists primarily to support a single method (member function).

// Lua Advanced Flow
What is a coroutine? !! A function that can temporarily give up control (i.e., yield) at any point, and later be resumed. At each giving up of control, it may pass >=1 values back to the caller (yielding these values).
How do you use a coroutine in Lua? !! First get a coroutine wrapper function with coroutine.wrap(func_name)
What is a loop construction that iterates over the values of a container? !! A for-each loop or iterator-based for-loop.
What is an iterator in Lua? !! A function that is called repeatedly, with each call returning one or more values that are typically used in one iteration of a for loop.
How does a Lua iterator indicate that it is exhausted (that the loop should end)? !! It returns nil.

// Intro to Lexing and Parsing
What is lexing? !! Performing a lexical analysis (breaking something into lexemes).
What is a lexer? !! A software component that does lexing.

// Basics of Lexical Analysis
What does a lexer do? !! Reads a character stream and outputs a lexeme stream.
How are lexemes classified? !! By categories.
What are some common lexeme categories? !! \n* Identifier - A name for some entity.\n* Keyword - Looks like an identifier, has special meaning\n* Operator - Alternative to a function call (args are operands, arity is # of operands)\n* Literal - Representation of fixed value in code\n* Punctuation - Extra lexemes that fit into no other category
What is the maximal-munch rule? !! A lexeme is always the longest substring beginning from its starting point that can be interpreted as a lexeme.
What is a state machine? !! It has a current state (may simply be a number) which a program running it stores. It proceeds in steps, looking at the current item and deciding what state to go to next. 

// State Machine Lexing Cont'd
When should two situations be handled by the same state in a state machine? !! If they should react identically to all future input.
What are a program's invariants? !! Statements that are true at a given point in a program.

// State Machine Lexing Cont'd, Basics of Syntax Analysis, Recursive-Descent Parsing.
What is backtracking? !! Adding a character to the current lexeme by default, and undoing that decision (backtracking) if it fits instead in the next lexeme.
What is look-ahead? !! If we see a character that could be a part of the current or a next lexeme, look at the next character to figure out which lexeme the character belongs to.
Which is faster: Look-ahead, or backtracking? !! Look-ahead.
When can we handle illegal characters in a function, and which is best for a lexer? !! Before the function, during the function, and after the function. A lexer deals with illegal characters after the function by passing malformed lexemes to the parser which then does the complaining for the lexer.
Is a malformed lexeme ever wanted? !! No. They are always unwanted. Just like me :') (jk)
If a lexer reads a character stream and outputs a lexeme stream, what does a parser do? !! It reads a lexeme stream and outputs a representation of the structure (e.g., an AST).
What are the two flavors of parsing? !! \n* Top-down -> Goes through the derivation from top to bottom, expanding non-terminals as it goes, beginning with the string to be derived (maybe a program).\n* Bottom-up -> Goes through the derivation from bottom to top, beginning with the string to be derived, reducing substrings to non-terminals as it goes, and ending with the start symbol.
Simply speaking, what is Predictive Recursive Descent? !! A top-down parsing method.
Simply speaking, what is Shift-Reduce? !! A bottom-up parsing method.
What are Predictive Recursive Descent parsers called? !! LL parsers. This comes from from the fact that they read their input from left to right and go through the steps necessary to create leftmost derivations.
What does it mean for a grammar to be LL(k) for some integer k? !! A parser for an LL(k) grammar requires k upcoming input symbols to make decisions.
Do either LL(1) or LR(1) grammars require parsers to perform look-ahead? !! No.
What are Shift-Reduce parsers called? !! LR parsers, because they read input from left to right and perform the necessary steps to construct rightmost derivations.
What does it mean for a grammar to be LR(k) for some integer k? !! A parser for an LR(k) grammar requires k upcoming input symbols to make decisions.
What does a Recursive Descent parser consist of? !! A number of parsing functions (one for each non-terminal) which are all mutually recursive.
What makes a parser predictive? !! If, when applying a production, the input does not match its right-hand side, the parser gives up and flags the input as syntactically incorrect.

// Recursive Descent Parsing Cont'd
What is left recursion? !! When the right-hand side of a production for some non-terminal A begins with A (i.e., A -> A "+" "b" | "a")

// Shift-Reduce Parcing 
What is a shift-reduce automaton? !! A state machine with an associated stack that is always based on a grammar. Each stack holds a symbol from the grammar (terminal or non-terminal) and a state (a number). The current state is the one on the top of the stack.
At each step of a shift-reduce automaton, one of four actions is performed. What are they? !! \n* Shift -> Shift the next input symbol onto the stack (push)\n* Reduce -> Apply a production in reverse, reducing symbols on the stack to a single non-terminal which then replaces them on the stack\n* Accept -> Done, successful, syntactically correct\n* Error -> Done, unsuccessful, syntactically incorrect
What are the parts of a parsing table in a shift-reduce automaton? !! The action table (rows for states, columns for terminals, each entry specifying one of the four shift-reduce actions), and the goto table (rows for states, columns for non-terminals, with entries possibly specifying states).
When is the only time that the goto table in the parsing table of a shift-reduce automaton is used? !! After a REDUCE operation.
What are LALR grammars/parsers? !! Look-Ahead LR(1) grammars/parsers are the grammars/parsers for which it works to merge two states into one if they involve the same position in the production.

// Parsing Wrap-Up
What order of time do all practical lexers and parsers run in? !! Linear time.
What is a shotgun parser? !! A parser that produces byte code rather than an AST or similar structure. The parser IS the compiler.
What is the typical output of a parser? !! An abstract syntax tree (AST).
What is a parsing expression grammar? !! An alternative to CFG's. Similar to CFG's, but has more options available. A PEG always forms a derivation using the first working production.
Can parsing expression grammars be ambiguous? !! No!
What is a generalized LR? !! A variant of shift-reduce, but allowing for non LR(k) grammars.
What is the simple way of looking at what parsing is? !! Parsing is making sense of input.
What is a type system? !! A way of classifying expressions and/or values in a program by the kinds of values they represent/are, in order to prevent undesirable program states.
What is the classification assigned to an entity called? !! The entity's type.
What is an extensible type system? !! A type system that allows programmers to define new types.
What does type checking mean? !! Checking and enforcing the restrictions associated with a type system.
What are the various actions involved with a type system called? !! Typing.
What are the three axes along which we classify type systems? !! \n1.) Overall type system: static or dynamic.\n2.) How types are specified: manifest or implicit.\n3.) How types are checked: nominal or structural.\n We can also consider type safety.
When is a PL or PL construct type safe? !! If it forbids operations that are incorrect for the types on which they operate.
When is a static type system sound/unsound? !! If it guarantees that operations that are incorrect for a type will not be performed; otherwise it is unsound.
Is it a critisism to call a PL unsound? !! No! 
What is strong typing VS weak typing? !! Merely the thought of defining these terms caused the death of a thousand kittens.

// Functional PL's, intro to Haskell
What is an alternative to imperative programming? !! Declarative programming: writing code to tell a computer what is true (rather than what to do).
What is the most common declarative programming style? !! Functional programming.
What is a side effect of a function (or other code)? !! A side effect is when a function (or other code) makes a change other than the return value that is visible outside of the function (or other code).
What is functional programming? !! A programming style, in which:\n* Computation is considered primarily in terms of the evaluation of functions (rather than execution of tasks)\n* Functions are of primary interest (rather than just wrappers for code)\n* Side effects are avoided. Variable values generally remain unchanged after being set.
What makes a PL a functional PL? !! If it is designed to support functional programming well.
What is different about a PURE functional PL and a functional PL? !! Pure functional PL's FORBID mutable data, and, as a result, side effects.
What is a higher-order function? !! A function that acts on functions.
What makes a value mutable? !! If it can be changed. Mutable values can be changed.
What is significant indentation? !! When indentation is used to indicate the start and end of a block of code.
What is tail-call optimization (TCO)? !! When the last operation in a function is not implemented via a function call, but rather as the equivalent of a goto, never returning to the original function. Tail calls use no additional stack space.
What is pattern matching in Haskell? !! Defining a function differently for different patterns. The first match is the one used. For example:\n factorial 0 = 1      -- Haskell\nfactorial n = n * factorial (n-1)
What kind of evaluation does Haskell use? !! Lazy evaluation.
What kind of evaluation does Lua use? !! Eager evaluation.
What is GHC? !! A Haskell compiler that usually generates native machine code.
What is GHCi? !! An interactive environment that interprets Haskell code. Such environments are often called a Read-Eval-Print Loop (REPL).
What is a Read-Eval-Print Loop (REPL)? !! An interactive environment that interprets code.

// Haskell Functions/Lists
What is the difference between Haskell's normal and special identifiers? !! Normal identifiers name variables and start with a lowercase letter or underscore. Special identifiers name modules/types/constructors and start with an uppercase letter.
What is the terminology for what a function does to its arguments? !! A function is applied to its arguments. This is called a function application.
What do special names in Haskell begin with? !! A colon (:)
What is currying? !! Simulating a multiple-argument function using single-argument functions that returns functions.
What two categories of collections of multiple items do statically typed PL's (including Haskell) typically support? !! Collections containing a varying number of items of the same type (Haskell lists), and collections containing a fixed number of items of possibly different types (Haskell tuples).
What does a Haskell list do? A Haskell tuple? !! Haskell lists contain a varying number of items of the same type, and Haskell tuples contain a fixed number of items of possibly different types.
What is a predicate in programming? !! A function that returns a boolean.
What is a primitive in programming? !! A fundamental operation that other operations are constructed from.
What is Haskell's cons operation? !! Construct a list given its first item and a list of other items using the infix (:) operator. For example:\n[5, 2, 1, 0] == 5:[2, 1, 0] == 5:2:1:0:[]
What is set comprehension? !! For example: { xy | x Ɛ {3, 2, 1} & y Ɛ {10, 11, 12} } is read as "The set of all xy for x in the set {3, 2, 1} and y in the set {10, 11, 12}."
What is list comprehension? !! A construct for PL's based on set comprehension.
What is the head of a list? The tail? !! The head of a list is its first element. The tail is the rest of that list.
How do functions in Haskell typically handle lists? !! With recursion. The base case handles the empty list, and the recursive call handles a nonempty list. Computation is done on the head (first element) and recurses on the tail (the rest of the list).

// Haskell Flow of Control
What is a PL's flow of control? !! The ways a PL determines what code is executed.
What is selection in flow of control? !! What allows us to choose one of multiple options to execute?
What are Haskell guards? !! The equivalent of piecewise functions in mathematical notation. Written as:\nmyAbs x\n    | x >= 0      = x\n    | otherwise   = -x
Complete the sentence: In functional programming, many flow-of-control constructs can be encapsulated as... !! In functional programming, many flow-of-control constructs can be encapsulated as FUNCTIONS.
What is a fold (A.K.A., a reduce)? !! An operation dependent/performed on every item in a collection of items (e.g., sum of all numbers, max of all numbers).

// Haskell I/O
What is a Haskell typeclass (or simply class)? !! A collection of types that implement a common interface.
What are some standard typeclasses? !! \n* Eq: Equality-comparable types -> Types that have == and /= defined.\n* Ord: Orderable types ->  Types that have <, <=, >, >= defined.\n* Num: Numeric types -> Types that have +, -, *, and things like abs defined.
What are two standard typeclasses related to string conversion? !! \n1.) Showable types -> Types that can be converted into strings using the overloaded function show.\n2.) Readable types -> Types taht can be converted from strings into other types using the overloaded function read.
Where are Haskell's side effects stored? !! In I/O actions.

//Haskell I/O Cont'd
What is a haskell do-expression? !! A cleaner way to write I/O. "do" followed by an indented block. Do wraps around >> and >>= operators.
What does a haskell do-expression look like (just know generally how they work)? !! inputLength = do\n    putStr "Type some text: "\n    line <- getLine\n    putStrLn ""\n    putStr "You typed: "\n    putStrLn line\n    putStr "Length of your line = "\n    putStrLn $ show $ length line
What is a handle? !! An object that identifies and allows access to an open file.
What does an I/O flush do? !! It makes sure that anything in the I/O buffer is written (sent out).
Does haskell's return actually return? !! No! It creates a do-nothing I/O action so that I/O works for all possible I/O (no side effects!)
What is a haskell I/O action? !! Holds a description of a sequence of side effects plus a wrapped value.
How is a haskell constructor for types defined? !! data Product = Pr String String (Pr is a c'tor for Product, which is a collection of two strings).
How do you get at the values within a haskell constructed type? !! Let Product = Pr String String. We can define:\npName :: Product -> String\n pName (Pr pn _) = pn\n The same for mn (the second string in Pr).
